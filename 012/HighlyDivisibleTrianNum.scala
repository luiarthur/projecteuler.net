/** Highly Disvisible Triangular Number
 *  The sequence of triangle numbers is generated by adding the natural
 *  numbers. So the 7th triangle number would be 
 *  1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
 *  The first ten terms would be:
 *
 *  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 *  Let us list the factors of the first seven triangle numbers:
 *
 *     1: 1
 *     3: 1,3
 *     6: 1,2,3,6
 *     10: 1,2,5,10
 *     15: 1,3,5,15
 *     21: 1,3,7,21
 *     28: 1,2,4,7,14,28
 *     We can see that 28 is the first triangle number to have over five divisors.
 *
 *     What is the value of the first triangle number to have over five hundred divisors?
 */

def findTriWithNFactors(n: Int): Int = {
  def isFactor(n: Int, x: Int) = n % x == 0
  def factors(n: Int): Set[Int] = {
    val sets = (1 to math.sqrt(n).toInt).toSet.filter(isFactor(n,_))
    sets union sets.map(n / _)
  }
  def loop(i: Int, tri: Int): Int = 
    if (factors(tri).size < n) loop(i+1,tri+i+1) else tri
  loop(1,1)
}
findTriWithNFactors(500) // 76576500
